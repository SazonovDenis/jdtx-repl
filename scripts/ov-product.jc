//
include "db-project-product"

//
repl_info = cm("Информация по репликации",
) {
    def ext = createExt("jdtx.repl.main.ext.Jdx_Ext")
    try {
        ext.repl_info(args)
    } catch (Exception e) {
        e.printStackTrace()
    }
}

//
repl_create = cm("Инициализация базы как рабочей станции",
        "ws": [value: 0, help: "Код этой рабочей станции"],
) {
    def ext = createExt("jdtx.repl.main.ext.Jdx_Ext")
    ext.repl_create(args)
}

//
repl_add_ws = cm("Добавляет рабочую станцию на сервер",
        "ws": [value: 0, help: "Код рабочей станции"],
        "name": [value: null, help: "Название рабочей станции"],
) {
    def ext = createExt("jdtx.repl.main.ext.Jdx_Ext")
    ext.repl_add_ws(args)
}

//
repl_enable = cm("Активирует рабочую станцию",
        "ws": [value: 0, help: "Код рабочей станции"],
) {
    def ext = createExt("jdtx.repl.main.ext.Jdx_Ext")
    ext.repl_enable(args)
}

//
repl_disable = cm("Отключает рабочую станцию",
        "ws": [value: 0, help: "Код рабочей станции"],
) {
    def ext = createExt("jdtx.repl.main.ext.Jdx_Ext")
    ext.repl_disable(args)
}

//
repl_sync_ws = cm("Сеанс синхронизации рабочей станции (прием и отправка) через каталог",
        "dir": [value: null, help: "Каталог для обмена"],
        "from": [value: 0, help: "Начальный возраст отправляемых реплик"],
        "to": [value: 0, help: "Конечный возраст отправляемых реплик"],
        "mark": [value: false, help: "Делать отметку 'отправлено' для отправленных реплик"],
) {
    def ext = createExt("jdtx.repl.main.ext.Jdx_Ext")
    ext.repl_sync_ws(args)
}

//
repl_sync_srv = cm("Сеанс синхронизации для сервера (прием и тиражирование) через каталог",
        "dir": [value: null, help: "Каталог для обмена"],
        "from": [value: 0, help: "Начальный номер отправляемых реплик"],
        "to": [value: 0, help: "Конечный номер отправляемых реплик"],
        "ws": [value: 0, help: "Код рабочей станции, для которой готовятся реплики"],
        "mark": [value: false, help: "Делать отметку 'отправлено' для отправленных реплик"],
) {
    def ext = createExt("jdtx.repl.main.ext.Jdx_Ext")
    ext.repl_sync_srv(args)
}

//
repl_mail_check = cm("Инициализация или проверка почты",
        "ws": [value: 0, help: "Код рабочей станции"],
        "create": [value: false, help: "Создать ящики для рабочей станции"],
) {
    def ext = createExt("jdtx.repl.main.ext.Jdx_Ext")
    try {
        ext.repl_mail_check(args)
    } catch (Exception e) {
        e.printStackTrace()
    }
}

//
repl_app_version = cm("Версия ПО") {
    def ext = createExt("jdtx.repl.main.ext.Jdx_Ext")
    ext.repl_app_version(args)
}

//
repl_app_update = cm("Послать сигнал на обновление ПО",
        "-file": [help: "Файл для установки обновления"],
) {
    def ext = createExt("jdtx.repl.main.ext.Jdx_Ext")
    ext.repl_app_update(args)
}



//
repl_dbstruct_start = cm("Начать смену структуры") {
    def ext = createExt("jdtx.repl.main.ext.Jdx_Ext")
    ext.repl_dbstruct_start(args)
}

//
repl_dbstruct_state = cm("Состояние mute у рабочих станций",
        "wait": [help: "Ожидать состояния у всех станций mute = true"],
) {
    def ext = createExt("jdtx.repl.main.ext.Jdx_Ext")
    ext.repl_dbstruct_state(args)
}

//
repl_dbstruct_finish = cm("Завершить смену структуры") {
    def ext = createExt("jdtx.repl.main.ext.Jdx_Ext")
    ext.repl_dbstruct_finish(args)
}



//
repl_set_cfg = cm("repl_set_cfg") {
    def ext = createExt("jdtx.repl.main.ext.Jdx_Ext")
    ext.repl_set_cfg(args)
}

//
repl_send_cfg = cm("repl_send_cfg") {
    def ext = createExt("jdtx.repl.main.ext.Jdx_Ext")
    ext.repl_send_cfg(args)
}



//
repl_service_start = cm("Запуск службы") {
    def ext = createExt("jdtx.repl.main.ext.Jdx_Ext")
    ext.repl_service_start(args)
}

//
repl_service_state = cm("Статус службы") {
    def ext = createExt("jdtx.repl.main.ext.Jdx_Ext")
    ext.repl_service_state(args)
}

//
repl_service_stop = cm("Остановка службы") {
    def ext = createExt("jdtx.repl.main.ext.Jdx_Ext")
    ext.repl_service_stop(args)
}

//
repl_service_install = cm("Установить службу") {
    def ext = createExt("jdtx.repl.main.ext.Jdx_Ext")
    ext.repl_service_install(args)
}

//
repl_service_remove = cm("Деинсталляция службы") {
    def ext = createExt("jdtx.repl.main.ext.Jdx_Ext")
    ext.repl_service_remove(args)
}

//
gen_setup = cm("gen_setup") {
    def ext = createExt("jdtx.repl.main.ext.Jdx_Ext")
    ext.gen_setup(args)
}

