//
include "db-project-product"

//
repl_info = cm("Информация по репликации",
) {
    def ext = createExt("jdtx.repl.main.ext.Jdx_Ext")
    try {
        ext.repl_info(args)
    } catch (Exception e) {
        e.printStackTrace()
    }
}

//
rec_merge_find = cm("Поиск дубликатов",
        "table": [value: null, help: "Имя таблицы"],
        "fields": [value: null, help: "Поля для поиска"],
        "file": [value: null, help: "Файл с результатом поиска в виде задач на слияние"],
        "cfg_group": [value: null, help: "Конфигурация антагонистичных полей"],
        "use_null": [value: null, help: "Имя таблицы"],
) {
    def ext = createExt("jdtx.repl.main.ext.Merge_Ext")
    ext.rec_merge_find(args)
}

//
rec_merge_exec = cm("Слияние дубликатов",
        "file": [value: null, help: "Файл с задачами на слияние"],
        "delete": [value: false, help: "Выполнять не только обновление зависимых, но также и удаление основных записей"],
        
) {
    def ext = createExt("jdtx.repl.main.ext.Merge_Ext")
    ext.rec_merge_exec(args)
}

//
repl_create = cm("Инициализация базы как рабочей станции",
        "ws": [value: 0, help: "Код этой рабочей станции"],
) {
    def ext = createExt("jdtx.repl.main.ext.Jdx_Ext")
    ext.repl_create(args)
}

//
repl_add_ws = cm("Добавляет рабочую станцию на сервер",
        "ws": [value: 0, help: "Код рабочей станции"],
        "name": [value: null, help: "Название рабочей станции"],
        "guid": [value: null, help: "guid рабочей станции"],
        "cfg_publications": [value: null, help: "cfg-файл для publications рабочей станции"],
        "cfg_decode": [value: null, help: "cfg-файл для decode рабочей станции"],
) {
    def ext = createExt("jdtx.repl.main.ext.Jdx_Ext")
    ext.repl_add_ws(args)
}

//
repl_restore_ws = cm("Восстанавливает рабочую станцию при потере базы",
        "ws": [value: 0, help: "Код рабочей станции"],
        "cfg_snapshot": [value: null, help: "cfg-файл для фильтрации snapshot рабочей станции"],
) {
    def ext = createExt("jdtx.repl.main.ext.Jdx_Ext")
    ext.repl_restore_ws(args)
}

//
repl_ws_enable = cm("Активирует рабочую станцию",
        "ws": [value: 0, help: "Код рабочей станции"],
) {
    def ext = createExt("jdtx.repl.main.ext.Jdx_Ext")
    ext.repl_ws_enable(args)
}

//
repl_ws_disable = cm("Отключает рабочую станцию",
        "ws": [value: 0, help: "Код рабочей станции"],
) {
    def ext = createExt("jdtx.repl.main.ext.Jdx_Ext")
    ext.repl_ws_disable(args)
}

//
repl_check_id = cm("repl_check_id",
) {
    def ext = createExt("jdtx.repl.main.ext.Jdx_Ext")
    ext.repl_check_id(args)
}


/*
//
repl_sync_ws = cm("Сеанс синхронизации рабочей станции (прием и отправка) через каталог",
        "dir": [value: null, help: "Каталог для обмена"],
        "from": [value: 0, help: "Начальный возраст отправляемых реплик"],
        "to": [value: 0, help: "Конечный возраст отправляемых реплик"],
        "mark": [value: false, help: "Делать отметку 'отправлено' для отправленных реплик"],
) {
    def ext = createExt("jdtx.repl.main.ext.Jdx_Ext")
    ext.repl_sync_ws(args)
}

//
repl_sync_srv = cm("Сеанс синхронизации для сервера (прием и тиражирование) через каталог",
        "dir": [value: null, help: "Каталог для обмена"],
        "from": [value: 0, help: "Начальный номер отправляемых реплик"],
        "to": [value: 0, help: "Конечный номер отправляемых реплик"],
        "ws": [value: 0, help: "Код рабочей станции, для которой готовятся реплики"],
        "mark": [value: false, help: "Делать отметку 'отправлено' для отправленных реплик"],
) {
    def ext = createExt("jdtx.repl.main.ext.Jdx_Ext")
    ext.repl_sync_srv(args)
}
*/

//
repl_mail_check = cm("Инициализация или проверка почты",
        "ws": [value: 0, help: "Код рабочей станции"],
        "create": [value: false, help: "Создать ящики для рабочей станции"],
) {
    def ext = createExt("jdtx.repl.main.ext.Jdx_Ext")
    try {
        ext.repl_mail_check(args)
    } catch (Exception e) {
        e.printStackTrace()
    }
}

//
repl_app_version = cm("Версия ПО") {
    def ext = createExt("jdtx.repl.main.ext.Jdx_Ext")
    ext.repl_app_version(args)
}

//
repl_app_update = cm("Послать сигнал на обновление ПО",
        "file": [value: null, help: "Файл для установки обновления"],
) {
    def ext = createExt("jdtx.repl.main.ext.Jdx_Ext")
    ext.repl_app_update(args)
}


//
repl_request_snapshot = cm("Запрашивает shapshot таблиц с рабочей станции",
        "ws": [value: null, help: "Код рабочей станции"],
        "tables": [value: null, help: "Имена таблиц, через запятую"],
) {
    def ext = createExt("jdtx.repl.main.ext.Jdx_Ext")
    ext.repl_request_snapshot(args)
}

//
repl_ws_mute = cm("Перевести станцию в состояние MUTE",
        "ws": [value: null, help: "Код рабочей станции"]) {
    def ext = createExt("jdtx.repl.main.ext.Jdx_Ext")
    ext.repl_ws_mute(args)
}

//
repl_ws_unmute = cm("Вывести станцию из состояния MUTE",
        "ws": [value: null, help: "Код рабочей станции"]
) {
    def ext = createExt("jdtx.repl.main.ext.Jdx_Ext")
    ext.repl_ws_unmute(args)
}


//
repl_dbstruct_start = cm("Начать смену структуры") {
    def ext = createExt("jdtx.repl.main.ext.Jdx_Ext")
    ext.repl_dbstruct_start(args)
}

//
repl_dbstruct_state = cm("Состояние mute у рабочих станций",
        "wait": [value: null, help: "Ожидать состояния у всех станций mute = true"],
) {
    def ext = createExt("jdtx.repl.main.ext.Jdx_Ext")
    ext.repl_dbstruct_state(args)
}

//
repl_dbstruct_finish = cm("Завершить смену структуры") {
    def ext = createExt("jdtx.repl.main.ext.Jdx_Ext")
    ext.repl_dbstruct_finish(args)
}



//
repl_set_cfg = cm("Задать конфигурацию рабочей станции",
        "file": [value: null, help: "cfg-файл"],
        "cfg": [value: null, help: "Вид конфигурации"],
) {
    def ext = createExt("jdtx.repl.main.ext.Jdx_Ext")
    ext.repl_set_cfg(args)
}

//
repl_send_cfg = cm("Отправить конфигурацию на рабочую станцию",
        "file": [value: null, help: "cfg-файл"],
        "cfg": [value: null, help: "Вид конфигурации"],
        "ws": [value: null, help: "Рабочая станция-получатель"]
) {
    def ext = createExt("jdtx.repl.main.ext.Jdx_Ext")
    ext.repl_send_cfg(args)
}


//
/*
repl_set_quein = cm("Задать номер последней обработанной реплики из входящей очереди",
        "no": [value: null, help: "Номер реплики"],
) {
    def ext = createExt("jdtx.repl.main.ext.Jdx_Ext")
    ext.repl_set_quein(args)
}
*/


//
repl_repair_backup = cm("Исправить репликацию после восстановления базы из бэкапа") {
    def ext = createExt("jdtx.repl.main.ext.Jdx_Ext")
    ext.repl_repair_backup(args)
}

//
repl_replica_use = cm("Применить реплику из файла") {
    def ext = createExt("jdtx.repl.main.ext.Jdx_Ext")
    ext.repl_replica_use(args)
}

//
rec_relocate = cm("Перемещение pk записи",
    "table": [value: null, help: "Имя таблицы"],
    "sour": [value: null, help: "Исходный pk"],
    "dest": [value: null, help: "Конечный pk"],
) {
    def ext = createExt("jdtx.repl.main.ext.Merge_Ext")
    ext.rec_relocate(args)
}

rec_relocate_all = cm("Перемещение pk записей, больше определенного id",
    "table": [value: null, help: "Имя таблицы"],
    "sour": [value: null, help: "Значение pk, выше которого нужно перемещать запись"],
) {
    def ext = createExt("jdtx.repl.main.ext.Merge_Ext")
    ext.rec_relocate_all(args)
}

//
rec_relocate_check = cm("Перемещение pk записи - проверка зависимостей") {
    def ext = createExt("jdtx.repl.main.ext.Merge_Ext")
    ext.rec_relocate_check(args)
}


//
repl_find_record = cm("Найти последний вариант записи в репликах, сформировать отдельный файл из этих реплик",
        "id": [value: null, help: "Таблица и полный id записи, например -id:ABN:10:12345"],
        "dir": [value: null, help: "Каталог с репликами для поиска, например -dir:\"d:/temp\""],
        "out": [value: null, help: "Файл с репликой-результатом, например -out:\"d:/temp/ABN_10_12345.zip\""],
        "skipDel": [value: false, help: "Пропускать реплики на удаление записи"],
        
) {
    def ext = createExt("jdtx.repl.main.ext.Jdx_Ext")
    ext.repl_find_record(args)
}


//
repl_service_list = cm("Список установленных служб") {
    def ext = createExt("jdtx.repl.main.ext.Jdx_Ext")
    ext.repl_service_list(args)
}

//
repl_service_start = cm("Запуск службы") {
    def ext = createExt("jdtx.repl.main.ext.Jdx_Ext")
    ext.repl_service_start(args)
}

//
repl_service_state = cm("Статус службы") {
    def ext = createExt("jdtx.repl.main.ext.Jdx_Ext")
    ext.repl_service_state(args)
}

//
repl_service_stop = cm("Остановка службы") {
    def ext = createExt("jdtx.repl.main.ext.Jdx_Ext")
    ext.repl_service_stop(args)
}

//
repl_service_install = cm("Установка службы") {
    def ext = createExt("jdtx.repl.main.ext.Jdx_Ext")
    ext.repl_service_install(args)
}

//
repl_service_remove = cm("Деинсталляция службы") {
    def ext = createExt("jdtx.repl.main.ext.Jdx_Ext")
    ext.repl_service_remove(args)
}

//
gen_setup = cm("gen_setup") {
    def ext = createExt("jdtx.repl.main.ext.Jdx_Ext")
    ext.gen_setup(args)
}

